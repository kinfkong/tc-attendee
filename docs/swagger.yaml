openapi: 3.0.0
info:
  title: Wipro Event Management REST API
  description: |
    REST API for the Wipro Event Management Application.
  version: 1.0.0
servers:
  - url: 'https://sample.wiproevents.com/api/v1'
security:
  - bearerAuth: []
paths:
  /login:
    post:
      summary: Login
      description: |
        Login using username and password. 
      tags:
        - Security
      requestBody:
        description: A login request
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  description: The email
                  type: string
                password:
                  description: The password
                  type: string
                rememberMe:
                  description: Remember me flag
                  type: boolean
      security: []
      responses:
        '200':
          description: |
            Successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: The token
                    type: string
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: FORBIDDEN - not verified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup:
    post:
      summary: Register User.
      description: >
        Signup/register user. Please note that it will create user with full
        name, email and password first. The user profile will then be updated
        using the update user endpoint.
      tags:
        - User
        - Security
      requestBody:
        description: A user to be created
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
              properties:
                fullName:
                  description: The full name
                  type: string
                email:
                  description: The email
                  type: string
                password:
                  description: The password
                  type: string
      security: []
      responses:
        '200':
          description: The operation succeeded. The entity will be returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup/facebook:
    post:
      summary: Sign up with facebook.
      description: |
        Sign up with facebook
      tags:
        - User
        - Security
      security: []
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup/twitter:
    post:
      summary: Sign up with twitter.
      description: |
        Sign up with twitter.
      tags:
        - User
        - Security
      security: []
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup/google:
    post:
      summary: Sign up with google.
      description: |
        Sign up with google,
      tags:
        - User
        - Security
      security: []
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup/linkedIn:
    post:
      summary: Sign up with linkedin.
      description: |
        Sign up with linkedin.
      tags:
        - User
        - Security
      security: []
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    post:
      summary: Log out.
      description: |
        Logging out. It requires authentication.
      tags:
        - Security
      responses:
        '200':
          description: |
            Successfully logged out.
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /verifyEmail:
    get:
      summary: verify email.
      description: |
        verify email.
      tags:
        - Security
      security: []
      parameters:
        - name: email
          in: query
          description: The email
          required: true
          schema:
            type: string
        - name: verificationToken
          in: query
          description: The verification token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The operation succeeded.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /initiateForgotPassword:
    post:
      summary: Initiate forgot password
      description: |
        Initiate forgot password.
      tags:
        - Security
      security: []
      parameters:
        - name: email
          in: path
          description: The email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The operation succeeded.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /changeForgotPassword:
    post:
      summary: Change forgot password
      description: |
        Change forgot password.
      tags:
        - Security
      requestBody:
        description: Change forgot password request
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - newPassword
                - forgotPasswordToken
              properties:
                email:
                  description: The email
                  type: string
                forgotPasswordToken:
                  description: The forgot password token
                  type: string
                newPassword:
                  description: The new password
                  type: string
      responses:
        '200':
          description: The operation succeeded.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /updatePassword:
    put:
      summary: Update user password.
      description: |
        update User password.
      tags:
        - Security
      requestBody:
        description: Update user password request
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  description: The oldPassword
                  type: string
                newPassword:
                  description: The newPassword
                  type: string
      responses:
        '200':
          description: The operation succeeded.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Search Users.
      description: |
        Search Users. 
      tags:
        - User
      parameters:
        - name: name
          in: query
          description: The name
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: an email
          required: false
          schema:
            type: string
        - name: userRoleId
          in: query
          description: the user role id
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Active
              - Deleted
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: responseType
          in: query
          description: The response type
          required: false
          schema:
            type: string
            enum:
              - User
              - UserInfo
            default: User
      responses:
        '200':
          description: The operation succeeded. The search result will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/User'
                        - $ref: '#/components/schemas/UserInfo'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/users/{id}':
    get:
      summary: Get the User.
      description: |
        retrieve User.
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          schema:
            type: string
        - name: responseType
          in: query
          description: The response type
          required: false
          schema:
            type: string
            enum:
              - User
              - UserInfo
            default: User
      responses:
        '200':
          description: Search result
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    oneOf:
                      - $ref: '#/components/schemas/User'
                      - $ref: '#/components/schemas/UserInfo'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user.
      description: |
        Update User. 
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user:
                  $ref: '#/components/schemas/User'
                profilePicure:
                  type: string
                  format: binary
      responses:
        '200':
          description: The User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete User.
      description: >
        Delete User. Please note that soft delete should be performed and the
        status should be set to deleted status, but the entity should remain. 
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /me:
    get:
      summary: Get current User.
      description: |
        retrieve current User.
      tags:
        - User
      responses:
        '200':
          description: The operation succeeded. The entity will be returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      summary: Search events.
      description: |
        Search events.
      tags:
        - Event
      parameters:
        - name: userId
          in: query
          description: The id of the user.
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: The event name
          required: false
          schema:
            type: string
        - name: locationLat
          in: query
          description: The location lat
          required: false
          schema:
            type: number
            format: float
        - name: locationLng
          in: query
          description: The location lng
          required: false
          schema:
            type: number
            format: float
        - name: durationDays
          in: query
          description: The duration of event.
          required: false
          schema:
            type: integer
        - name: eventStartDate
          in: query
          description: The start date
          required: false
          schema:
            type: string
            format: date
        - name: eventEndDate
          in: query
          description: The end date
          required: false
          schema:
            type: string
            format: date
        - name: registrationStartDate
          in: query
          description: The registration start date
          required: false
          schema:
            type: string
            format: date
        - name: registrationEndDate
          in: query
          description: The registration end date
          required: false
          schema:
            type: string
            format: date
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - name
              - startDate
              - registrationEndDate
              - locationNearMe
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: responseType
          in: query
          description: The response type
          required: false
          schema:
            type: string
            enum:
              - Event
              - EventInfo
            default: Event
      responses:
        '200':
          description: The events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Event.
      description: |
        Create Event. 
      tags:
        - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: The Event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}':
    get:
      summary: Get event.
      description: |
        Get Event. 
      tags:
        - Event
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The event data or the file in case of export.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Event'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Event.
      description: |
        Update Event. 
      tags:
        - Event
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: The Event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Event.
      description: >
        Delete Event. Please note that soft delete should be performed and the
        status should be set to deleted status, but the entity should remain. 
      tags:
        - Event
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}/dashboard':
    get:
      summary: Get event dashboard.
      description: |
        Get Event dashboard. 
      tags:
        - Event
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The event dashboard data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDashboard'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}/dayAgendas':
    get:
      summary: Get event day agendas.
      description: |
        Get Event day agendas. 
      tags:
        - Event
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The event agendas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDayAgenda'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}/sessions':
    get:
      summary: Get event sessions.
      description: |
        Get Event sessions. 
      tags:
        - Event
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The event sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}/engagements':
    get:
      summary: Get event engagements.
      description: |
        Get Event engagements. 
      tags:
        - Event
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The event engagements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engagements'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventDayAgendas:
    get:
      summary: Search eventDayAgendas.
      description: |
        Search eventDayAgendas.
      tags:
        - EventDayAgenda
      parameters:
        - name: eventId
          in: query
          description: The id of the entity.
          required: false
          schema:
            type: integer
            format: int64
        - name: day
          in: query
          description: The day.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventDayAgendas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDayAgenda'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create EventDayAgenda.
      description: |
        Create EventDayAgenda. 
      tags:
        - EventDayAgenda
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayAgenda'
      responses:
        '200':
          description: The EventDayAgenda.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDayAgenda'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventDayAgendas/{id}':
    get:
      summary: Get eventDayAgenda.
      description: |
        Get EventDayAgenda. 
      tags:
        - EventDayAgenda
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The eventDayAgenda data or the file in case of export.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/EventDayAgenda'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventDayAgenda.
      description: |
        Update EventDayAgenda. 
      tags:
        - EventDayAgenda
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayAgenda'
      responses:
        '200':
          description: The EventDayAgenda.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDayAgenda'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventDayAgenda.
      description: |
        Delete EventDayAgenda.
      tags:
        - EventDayAgenda
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventAttendees:
    get:
      summary: Search EventAttendees.
      description: |
        Search EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: eventId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Approved
              - Rejected
              - WaitingAppoval
              - Deleted
              - CheckedIn
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventAttendee'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event EventAttendee.
      description: |
        Create event EventAttendee. 
      tags:
        - EventAttendee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventAttendee'
      responses:
        '200':
          description: The EventAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventAttendees/{id}':
    get:
      summary: Get EventAttendee.
      description: |
        Get EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventAttendee.
      description: |
        Update EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventAttendee'
      responses:
        '200':
          description: The EventAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventAttendee.
      description: |
        Delete EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventAttendees/{id}/approve':
    put:
      summary: Approve EventAttendee.
      description: >
        Approve EventAttendee. The badge and QR code should be generated and
        returned in response.
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventAttendees/{id}/reject':
    put:
      summary: Reject EventAttendee.
      description: |
        Reject EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventAttendees/{id}/delete':
    put:
      summary: Delete EventAttendee.
      description: |
        Delete EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventAttendees/{id}/checkIn':
    put:
      summary: Check in EventAttendee.
      description: |
        Check in EventAttendee. 
      tags:
        - EventAttendee
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventAttendeeByQRCode:
    post:
      summary: Get EventAttendee by QR code.
      description: |
        Get EventAttendee by QR code. 
      tags:
        - EventAttendee
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: The EventAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userEventFeedbacks:
    get:
      summary: Search UserEventFeedbacks.
      description: |
        Search UserEventFeedback. 
      tags:
        - UserEventFeedback
      parameters:
        - name: eventId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserEventFeedback'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event UserEventFeedback.
      description: |
        Create event UserEventFeedback. 
      tags:
        - UserEventFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventFeedback'
      responses:
        '200':
          description: The UserEventFeedback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventFeedback'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userEventFeedbacks/{id}':
    get:
      summary: Get UserEventFeedback.
      description: |
        Get UserEventFeedback. 
      tags:
        - UserEventFeedback
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The UserEventFeedback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventFeedback'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UserEventFeedback.
      description: |
        Update UserEventFeedback. 
      tags:
        - UserEventFeedback
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventFeedback'
      responses:
        '200':
          description: The UserEventFeedback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventFeedback'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventWallPosts:
    get:
      summary: Search event wall posts.
      description: |
        Search event types. 
      tags:
        - EventWall
      parameters:
        - name: eventId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventWallPost'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event wall post.
      description: |
        Create event wall post. 
      tags:
        - EventWall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWallPost'
      responses:
        '200':
          description: The EventWallPost.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWallPost'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventWallPosts/{id}':
    get:
      summary: Get EventWallPost.
      description: |
        Get EventWallPost. 
      tags:
        - EventWall
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventWallPost.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWallPost'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventWallPost.
      description: |
        Update EventWallPost. 
      tags:
        - EventWall
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWallPost'
      responses:
        '200':
          description: The EventWallPost.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWallPost'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventWallPost.
      description: |
        Delete EventWallPost. All child posts should be deleted.
      tags:
        - EventWall
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventWallPosts/{id}/like':
    put:
      summary: Like EventWallPost.
      description: |
        Like EventWallPost. 
      tags:
        - EventWall
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventWallPosts/{id}/unlike':
    put:
      summary: Unlike EventWallPost.
      description: |
        Unlike EventWallPost. 
      tags:
        - EventWall
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventTypes:
    get:
      summary: Search event types.
      description: |
        Search event types. 
      tags:
        - EventType
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventType'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event type.
      description: |
        Create event type. 
      tags:
        - EventType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
      responses:
        '200':
          description: The EventType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventTypes/{id}':
    get:
      summary: Get EventType.
      description: |
        Get EventType. 
      tags:
        - EventType
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventType.
      description: |
        Update EventType. 
      tags:
        - EventType
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
      responses:
        '200':
          description: The EventType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventType.
      description: |
        Delete EventType.
      tags:
        - EventType
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /evenCategories:
    get:
      summary: Search event categories.
      description: |
        Search event categories. 
      tags:
        - EventCategory
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventCategory'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event category.
      description: |
        Create event category. 
      tags:
        - EventCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCategory'
      responses:
        '200':
          description: The EventCategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/eventCategories/{id}':
    get:
      summary: Get EventCategory.
      description: |
        Get EventCategory. 
      tags:
        - EventCategory
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The EventCategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventCategory.
      description: |
        Update EventCategory. 
      tags:
        - EventCategory
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCategory'
      responses:
        '200':
          description: The EventCategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventCategory.
      description: |
        Delete EventCategory.
      tags:
        - EventCategory
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{id}/eventFAQ':
    get:
      summary: Search event FAQs.
      description: |
        Search event FAQs. 
      tags:
        - EventFAQ
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFAQ'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event FAQ.
      description: |
        Create event FAQ. 
      tags:
        - EventFAQ
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFAQ'
      responses:
        '200':
          description: The EventFAQ.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFAQ'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EventFAQ.
      description: |
        Update EventFAQ. 
      tags:
        - EventFAQ
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
      responses:
        '200':
          description: The EventType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EventFAQ.
      description: |
        Delete EventFAQ.
      tags:
        - EventFAQ
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sessions:
    get:
      summary: Search sessions.
      description: |
        Search sessions.
      tags:
        - Session
      parameters:
        - name: eventId
          in: query
          description: The id of the entity.
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The id of the user.
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: The session name
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: The start date
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: The start date
          required: false
          schema:
            type: string
            format: date
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - name
              - startDate
              - registrationEndDate
              - locationNearMe
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The sessions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Session.
      description: |
        Create Session. 
      tags:
        - Session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: The Session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/sessions/{id}':
    get:
      summary: Get session.
      description: |
        Get Session. 
      tags:
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The session data or the file in case of export.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Session'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Session.
      description: |
        Update Session. 
      tags:
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: The Session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Session.
      description: >
        Delete Session. Please note that soft delete should be performed and the
        status should be set to deleted status, but the entity should remain. 
      tags:
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sessionAttendees:
    get:
      summary: Search SessionAttendees.
      description: |
        Search SessionAttendee. 
      tags:
        - SessionAttendee
        - Session
      parameters:
        - name: sessionId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Participating
              - Deleted
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionAttendee'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event SessionAttendee.
      description: |
        Create event SessionAttendee. 
      tags:
        - SessionAttendee
        - Session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionAttendee'
      responses:
        '200':
          description: The SessionAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/sessionAttendees/{id}':
    get:
      summary: Get SessionAttendee.
      description: |
        Get SessionAttendee. 
      tags:
        - SessionAttendee
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The SessionAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SessionAttendee.
      description: |
        Update SessionAttendee. 
      tags:
        - SessionAttendee
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionAttendee'
      responses:
        '200':
          description: The SessionAttendee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionAttendee'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SessionAttendee.
      description: |
        Delete SessionAttendee. 
      tags:
        - SessionAttendee
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/sessionAttendees/{id}/delete':
    put:
      summary: Set SessionAttendee status to deleted.
      description: |
        Set SessionAttendee status to deleted. 
      tags:
        - SessionAttendee
        - Session
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /polls:
    get:
      summary: Search polls.
      description: |
        Search polls. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: The name of the poll.
          required: false
          schema:
            type: string
        - name: context
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Event
              - Session
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The poll data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Poll'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Poll.
      description: |
        Create Poll. 
      tags:
        - Poll
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Poll'
      responses:
        '200':
          description: The Poll.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/polls/{id}':
    get:
      summary: Get poll.
      description: |
        Get poll. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The poll data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Poll.
      description: |
        Update Poll. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Poll'
      responses:
        '200':
          description: The Poll.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Poll.
      description: |
        Delete Poll. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/polls/{id}/totalResults':
    get:
      summary: Get poll toral results.
      description: |
        Get poll. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The poll data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalPollResults'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userPollAnswers:
    get:
      summary: Search UserPollAnswers.
      description: |
        Search UserPollAnswers. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: pollId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The poll answers data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPollAnswers'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserPollAnswers.
      description: |
        Create UserPollAnswers. 
      tags:
        - Poll
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPollAnswers'
      responses:
        '200':
          description: The UserPollAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPollAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userPollAnswers/{id}':
    get:
      summary: Get poll answers.
      description: |
        Get poll answers. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The poll data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPollAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UserPollAnswers.
      description: |
        Update UserPollAnswers. 
      tags:
        - Poll
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPollAnswers'
      responses:
        '200':
          description: The UserPollAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPollAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /surveys:
    get:
      summary: Search surveys.
      description: |
        Search surveys. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: The name of the survey.
          required: false
          schema:
            type: string
        - name: context
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Event
              - Session
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The survey data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Survey'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Survey.
      description: |
        Create Survey. 
      tags:
        - Survey
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '200':
          description: The Survey.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/surveys/{id}':
    get:
      summary: Get survey.
      description: |
        Get survey. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The survey data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Survey.
      description: |
        Update Survey. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '200':
          description: The Survey.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Survey.
      description: |
        Delete Survey. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userSurveyAnswers:
    get:
      summary: Search UserSurveyAnswers.
      description: |
        Search UserSurveyAnswers. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: surveyId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The survey answers data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSurveyAnswers'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserSurveyAnswers.
      description: |
        Create UserSurveyAnswers. 
      tags:
        - Survey
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSurveyAnswers'
      responses:
        '200':
          description: The UserSurveyAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSurveyAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userSurveyAnswers/{id}':
    get:
      summary: Get survey answers.
      description: |
        Get survey answers. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The survey data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSurveyAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UserSurveyAnswers.
      description: |
        Update UserSurveyAnswers. 
      tags:
        - Survey
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSurveyAnswers'
      responses:
        '200':
          description: The UserSurveyAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSurveyAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /quizes:
    get:
      summary: Search quizes.
      description: |
        Search quizes. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: The name of the quiz.
          required: false
          schema:
            type: string
        - name: context
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - Event
              - Session
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The quiz data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quiz'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Quiz.
      description: |
        Create Quiz. 
      tags:
        - Quiz
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '200':
          description: The Quiz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/quizes/{id}':
    get:
      summary: Get quiz.
      description: |
        Get quiz. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The quiz data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Quiz.
      description: |
        Update Quiz. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '200':
          description: The Quiz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Quiz.
      description: |
        Delete Quiz. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userQuizAnswers:
    get:
      summary: Search UserQuizAnswers.
      description: |
        Search UserQuizAnswers. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: sessionId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: quizId
          in: query
          description: The id of the session.
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The quiz answers data
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserQuizAnswers'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserQuizAnswers.
      description: |
        Create UserQuizAnswers. 
      tags:
        - Quiz
        - Engagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuizAnswers'
      responses:
        '200':
          description: The UserQuizAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuizAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userQuizAnswers/{id}':
    get:
      summary: Get quiz answers.
      description: |
        Get quiz answers. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The quiz data or the file in case of export.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuizAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UserQuizAnswers.
      description: |
        Update UserQuizAnswers. 
      tags:
        - Quiz
        - Engagement
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuizAnswers'
      responses:
        '200':
          description: The UserQuizAnswers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuizAnswers'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /conversations:
    get:
      summary: Search Conversations.
      description: |
        Search Conversation. 
      tags:
        - Message
      parameters:
        - name: userId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: sessionId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - Private
              - Session
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Conversation.
      description: |
        Create Conversation. 
      tags:
        - Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        '200':
          description: The Conversation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/conversations/{id}':
    get:
      summary: Get Conversation.
      description: |
        Get Conversation. 
      tags:
        - Message
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The Conversation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Conversation.
      description: |
        Update Conversation. 
      tags:
        - Message
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        '200':
          description: The Conversation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /messages:
    get:
      summary: Search Messages.
      description: |
        Search Message. 
      tags:
        - Message
      parameters:
        - name: userId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: conversationId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Message.
      description: |
        Create Message. 
      tags:
        - Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: The Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/messages/{id}':
    get:
      summary: Get Message.
      description: |
        Get Message. 
      tags:
        - Message
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Message.
      description: |
        Update Message. 
      tags:
        - Message
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: The Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Message.
      description: |
        Delete Message. 
      tags:
        - Message
      parameters:
        - name: id
          in: path
          description: The id of the entity.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userNotes:
    get:
      summary: Get UserNotes.
      description: |
        Get UserNotes. The current user will be identified by token.
      tags:
        - UserNote
      parameters:
        - name: eventId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: sessionId
          in: query
          description: The event id
          required: false
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserNote'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserNote.
      description: |
        Create UserNote. 
      tags:
        - UserNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNote'
      responses:
        '200':
          description: The UserNote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNote'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userNotes/{id}':
    put:
      summary: Update UserNote.
      description: |
        Update UserNote.
      tags:
        - UserNote
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNote'
      responses:
        '200':
          description: The UserNote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNote'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete UserNote.
      description: |
        Delete UserNote.
      tags:
        - UserNote
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications:
    get:
      summary: Get user's notifications.
      description: |
        Get user's notifications. The current user will be identified by token.
      tags:
        - Notification
      parameters:
        - name: status
          in: query
          description: The status
          required: false
          schema:
            type: string
            enum:
              - New
              - Read
        - name: startDate
          in: query
          description: The start date
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: The start date
          required: false
          schema:
            type: string
            format: date
        - name: offset
          in: query
          description: the offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: the limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create/send notification.
      description: |
        Create notification. 
      tags:
        - Notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: The Notification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/notifications/{id}/read':
    put:
      summary: Mark user's notification as read.
      description: |
        Mark user's notification as read.
      tags:
        - Notification
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eventNotifications:
    post:
      summary: Create/send event notification.
      description: |
        Create notification. 
      tags:
        - Notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotification'
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /emails:
    post:
      summary: Create/send email.
      description: |
        Create email. 
      tags:
        - Email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userRoles:
    get:
      summary: Get UserRoles.
      description: |
        Get UserRoles.
      tags:
        - UserRole
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserRole.
      description: |
        Create UserRole. 
      tags:
        - UserRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: The UserRole.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userRoles/{id}':
    put:
      summary: Update UserRole.
      description: |
        Update UserRole.
      tags:
        - UserRole
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: The UserRole.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete UserRole.
      description: |
        Delete UserRole.
      tags:
        - UserRole
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userEventAssignments:
    get:
      summary: Get UserEventAssignments.
      description: |
        Get UserEventAssignments.
      tags:
        - UserEventAssignment
      parameters:
        - name: userId
          in: query
          description: The user id.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          description: The event id.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The search result.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEventAssignment'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UserEventAssignment.
      description: |
        Create UserEventAssignment. 
      tags:
        - UserEventAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventAssignment'
      responses:
        '200':
          description: The UserEventAssignment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventAssignment'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/userEventAssignments/{id}':
    put:
      summary: Update UserEventAssignment.
      description: |
        Update UserEventAssignment.
      tags:
        - UserEventAssignment
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventAssignment'
      responses:
        '200':
          description: The UserEventAssignment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventAssignment'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete UserEventAssignment.
      description: |
        Delete UserEventAssignment.
      tags:
        - UserEventAssignment
      parameters:
        - name: id
          in: path
          description: The id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userPreferences:
    get:
      summary: Get current user preferences.
      description: |
        Get UserPreferences. 
      tags:
        - UserPreferences
      responses:
        '200':
          description: The UserPreferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UserPreferences.
      description: |
        Update UserPreferences. 
      tags:
        - UserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: The UserPreferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: NOT FOUND - if the resource in request did not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /designations:
    get:
      summary: Get all designations.
      description: |
        Get all designations.
      tags:
        - Lookup
      responses:
        '200':
          description: The results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Designation'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /timezones:
    get:
      summary: Get all timezones.
      description: |
        Get all timezones.
      tags:
        - Lookup
      responses:
        '200':
          description: The results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timezone'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /countries:
    get:
      summary: Get all countries.
      description: |
        Get all countries.
      tags:
        - Lookup
      responses:
        '200':
          description: The results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /permissions:
    get:
      summary: Get all permissions.
      description: |
        Get all permissions.
      tags:
        - Lookup
      responses:
        '200':
          description: The results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            FORBIDDEN - if the requesting user didn't have permission to perform
            the requested operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      description: |
        An error entity. 
      properties:
        message:
          type: string
          description: The error message.
    User:
      description: >
        The User entity. In the backend it should also contain password and
        security tokens which should never be returned to front-end.
      required:
        - id
        - fullName
        - email
        - userRoles
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        fullName:
          type: string
          description: The full name.
        email:
          type: string
          description: The email.
        personalPhone:
          type: string
          description: The personal phone.
        businessPhone:
          type: string
          description: The business phone.
        businessUnit:
          type: string
          description: The business unit.
        designation:
          $ref: '#/components/schemas/Designation'
        aboutMe:
          type: string
          description: The information about user.
        profilePictureURL:
          type: string
          description: The profile picure URL.
        userRoles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
    UserRole:
      description: |
        The UserRole. 
        Example: "Admin".
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Permission:
      description: |
        The permission
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
    UserEventAssignment:
      description: |
        The User event assignment
      required:
        - id
        - user
        - event
        - roles
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    UserInfo:
      description: >
        This is the User information entity to be referenced. It only contains
        id and name of the user in format firstName + lastName.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        email:
          type: string
          description: The email.
    Event:
      description: |
        The Event.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        template:
          type: boolean
          description: Flag if event is a template.
        name:
          type: string
          description: The name.
        description:
          type: string
          description: The description.
        startDate:
          type: string
          format: date
          description: The start date.
        endDate:
          type: string
          format: date
          description: The end date.
        registrationEndDate:
          type: string
          format: date
          description: The registration end date.
        location:
          $ref: '#/components/schemas/EventLocation'
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/EventInvitee'
        galleryImages:
          type: array
          items:
            $ref: '#/components/schemas/File'
        spashScreenRequired:
          type: boolean
          description: The flag indicating the splash screen is required.
        splashScreenFile:
          $ref: '#/components/schemas/File'
        imageThumbnailFile:
          $ref: '#/components/schemas/File'
        headerColor:
          type: string
          description: The header color
        category:
          $ref: '#/components/schemas/EventCategory'
        type:
          $ref: '#/components/schemas/EventType'
        souverirsProvided:
          type: boolean
          description: The flag if the souvenirs are provided.
        souvenirs:
          type: array
          items:
            $ref: '#/components/schemas/Souvenir'
        ticketOptions:
          type: array
          items:
            $ref: '#/components/schemas/TicketOption'
        paymentOptions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentOption'
        dayAgendas:
          type: array
          items:
            $ref: '#/components/schemas/EventDayAgenda'
        status:
          type: string
          description: The status.
          enum:
            - Saved
            - Published
            - Deleted
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    EventInfo:
      description: |
        The Event basic information.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        startDate:
          type: string
          format: date
          description: The start date.
        endDate:
          type: string
          format: date
          description: The end date.
    EventLocation:
      description: |
        The event location.
      required:
        - id
        - country
        - locality
        - streetAndBuilding
        - zip
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The location name. May be a venue name.
        country:
          $ref: '#/components/schemas/Country'
        state:
          type: string
          description: The state.
        locality:
          type: string
          description: The locality.
        streetAndBuilding:
          type: string
          description: The street and building part of the address.
        zip:
          type: string
          description: The zip.
        lattitude:
          type: number
          format: float
          description: The lattitude.
        longtitude:
          type: number
          format: float
          description: The lattitude.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    EventInvitee:
      description: |
        The event invitee.
      required:
        - id
        - eventId
        - name
        - email
        - phone
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        eventId:
          type: integer
          format: int64
          description: The ID of the event.
        name:
          type: string
          description: The name.
        email:
          type: string
          description: The email.
        phone:
          type: string
          description: The phone.
    EventAttendee:
      description: |
        The event attendee.
      required:
        - id
        - user
        - event
        - registeredOn
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/EventInfo'
        registeredOn:
          type: string
          format: date
          description: The registered on date.
        status:
          type: string
          description: The status.
          enum:
            - Approved
            - Rejected
            - WaitingAppoval
            - Deleted
            - CheckedIn
        souvenirOptions:
          type: array
          items:
            $ref: '#/components/schemas/SouvenirOption'
        airline:
          type: string
          description: The air line name.
        flightNumber:
          type: string
          description: The flight number.
        spouseAccompanying:
          type: boolean
          description: True if spouse is accompanying.
        spouseEmail:
          type: string
          description: The spouse email.
        accomodationDetails:
          type: string
          description: The accomodation details.
        qrCode:
          $ref: '#/components/schemas/File'
        badge:
          $ref: '#/components/schemas/File'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    Session:
      description: |
        The session.
      required:
        - id
        - event
        - name
        - venue
        - startTime
        - endTime
        - seatCapability
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        event:
          $ref: '#/components/schemas/EventInfo'
        name:
          type: string
          description: The session name.
        venue:
          type: string
          description: The venue name.
        building:
          type: string
          description: The building.
        rooms:
          type: string
          description: The rooms.
        mapImage:
          $ref: '#/components/schemas/File'
        startTime:
          type: string
          format: date
          description: The start time.
        endTime:
          type: string
          format: date
          description: The start time.
        seatCapability:
          type: integer
          description: the seat capability.
        assignedSpeakers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        addedSpeakers:
          type: array
          items:
            $ref: '#/components/schemas/SessionSpeaker'
        galleryImages:
          type: array
          items:
            $ref: '#/components/schemas/File'
        files:
          type: array
          items:
            $ref: '#/components/schemas/SessionFiles'
        feedbackSurvey:
          type: array
          items:
            $ref: '#/components/schemas/Survey'
        status:
          type: string
          description: The status.
          enum:
            - Active
            - Deleted
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    SessionInfo:
      description: |
        The Session basic information.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        startDate:
          type: string
          format: date
          description: The start date.
        endDate:
          type: string
          format: date
          description: The end date.
    SessionInfoWithStatistics:
      description: |
        The session info with statistics.
      required:
        - id
        - event
        - name
        - speakers
        - activityStatus
        - startTime
        - endTime
        - numberOfRegistered
        - timeIsConflicted
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        event:
          $ref: '#/components/schemas/EventInfo'
        name:
          type: string
          description: The session name.
        speakers:
          type: array
          items:
            type: string
        activityStatus:
          type: string
          description: The activity status.
          enum:
            - Active
            - Upcoming
            - Past
        startTime:
          type: string
          format: date
          description: The start time.
        endTime:
          type: string
          format: date
          description: The start time.
        numberOfRegistered:
          type: integer
          description: The number of registered.
        numberOfWaitlisted:
          type: integer
          description: The number of registered.
        timeIsConflicted:
          type: boolean
          description: True if the time is conflicted.
    SessionBreak:
      description: |
        The session break (breakfast, dinner, coffee break, etc).
      required:
        - id
        - name
        - venue
        - startTime
        - endTime
        - seatCapability
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The session name.
        venue:
          type: string
          description: The venue name.
        building:
          type: string
          description: The building.
        rooms:
          type: string
          description: The rooms.
        mapImage:
          $ref: '#/components/schemas/File'
        startTime:
          type: string
          format: date
          description: The start time.
        endTime:
          type: string
          format: date
          description: The start time.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    EventDayAgenda:
      description: |
        The session.
      required:
        - id
        - event
        - day
        - sessions
        - breaks
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        event:
          $ref: '#/components/schemas/EventInfo'
        day:
          type: integer
          description: the day.
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        breaks:
          type: array
          items:
            $ref: '#/components/schemas/SessionBreak'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    SessionAttendee:
      description: |
        The session attendee.
      required:
        - id
        - user
        - session
        - registeredOn
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        user:
          $ref: '#/components/schemas/UserInfo'
        session:
          $ref: '#/components/schemas/SessionInfo'
        registeredOn:
          type: string
          format: date
          description: The registered on date.
        status:
          type: string
          description: The status.
          enum:
            - Participating
            - Deleted
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    SessionSpeaker:
      description: |
        The added session speaker.
      required:
        - name
        - company
        - job
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        company:
          type: string
          description: The company.
        job:
          type: string
          description: The job.
        description:
          type: string
          description: The description.
        profilePictureURL:
          type: string
          description: The file URL.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    SessionFiles:
      description: |
        The session files.
      required:
        - id
        - category
        - files
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        category:
          $ref: '#/components/schemas/SessionFilesCategory'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
    SessionFilesCategory:
      description: |
        The session files category.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: PRE READ
    InvitationList:
      description: |
        The invitation list.
      required:
        - id
        - file
        - createdBy
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        file:
          $ref: '#/components/schemas/File'
        createdBy:
          $ref: '#/components/schemas/User'
    File:
      description: |
        The gallery image.
      required:
        - name
        - imageURL
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name
        fileURL:
          type: string
          description: The file URL.
    EventType:
      description: |
        The Event type. 
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: Public
    EventCategory:
      description: |
        The Event category. 
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: Talk Show
        logo:
          $ref: '#/components/schemas/File'
    Souvenir:
      description: |
        The souvenir.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: T-shirt
        description:
          type: string
          description: The description.
        options:
          type: array
          items:
            $ref: '#/components/schemas/Souvenir'
    SouvenirOption:
      description: |
        The souvenir option.
      required:
        - id
        - name
        - souvenir
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: XL
        type:
          type: string
          description: The type.
          example: size
        souvenir:
          $ref: '#/components/schemas/Souvenir'
    TicketOption:
      description: |
        The ticket option.
      required:
        - id
        - name
        - souvenir
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: XL
        price:
          type: number
          format: float
          description: The price of the ticket. 0 means free.
        quota:
          type: integer
          description: The tickets quota.
        description:
          type: string
          description: The description.
          example: All benefits of regular registration
    PaymentOption:
      description: |
        The payment option.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: Credit card
    SurveyQuestion:
      description: |
        The question.
      required:
        - id
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        surveyId:
          type: integer
          format: int64
          description: The ID of the survey.
        text:
          type: string
          description: The question text.
          example: Will you recommend this event?
        type:
          type: string
          description: The question type.
          enum:
            - SingleSelection
            - MultipleSelection
            - TextAnswer
        orderNumber:
          type: integer
          description: The number in the questions list.
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestionAnswerOption'
    QuizQuestion:
      description: |
        The quiz question.
      required:
        - id
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        quizId:
          type: integer
          format: int64
          description: The ID of the quiz.
        weight:
          type: integer
          description: The weight of the question.
        text:
          type: string
          description: The question text.
          example: Will you recommend this event?
        type:
          type: string
          description: The question type.
          enum:
            - SingleSelection
            - MultipleSelection
        orderNumber:
          type: integer
          description: The number in the questions list.
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestionAnswerOption'
    PollQuestion:
      description: |
        The poll question.
      required:
        - id
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        pollId:
          type: integer
          format: int64
          description: The ID of the survey.
        text:
          type: string
          description: The question text.
          example: Will you recommend this event?
        orderNumber:
          type: integer
          description: The number in the questions list.
        multiSelectAllowed:
          type: boolean
          description: True if multiple selections allowed.
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/PollQuestionAnswerOption'
    SurveyQuestionAnswerOption:
      description: |
        The survey question answer option.
      required:
        - id
        - questionId
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        questionId:
          type: integer
          format: int64
          description: The ID of the question.
        text:
          type: string
          description: The question text.
          example: Will you recommend this event?
        orderNumber:
          type: integer
          description: The number in the options list.
    PollQuestionAnswerOption:
      description: |
        The poll question answer option.
      required:
        - id
        - questionId
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        questionId:
          type: integer
          format: int64
          description: The ID of the question.
        text:
          type: string
          description: The question text.
          example: Will you recommend this event?
        orderNumber:
          type: integer
          description: The number in the options list.
    QuizQuestionAnswerOption:
      description: |
        The quiz answer option.
      required:
        - id
        - questionId
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        questionId:
          type: integer
          format: int64
          description: The ID of the question.
        text:
          type: string
          description: The question text.
        orderNumber:
          type: integer
          description: The number in the options list.
        rightAnswer:
          type: boolean
          description: True if right answer (for quiz).
    UserSurveyQuestionAnswer:
      description: |
        The question answer by user.
      required:
        - id
        - question
        - user
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        question:
          $ref: '#/components/schemas/SurveyQuestion'
        user:
          $ref: '#/components/schemas/UserInfo'
        selectedAnswerOptions:
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestionAnswerOption'
        textAnswer:
          type: string
          description: The text answer (if question's type is ).
    UserPollQuestionAnswer:
      description: |
        The question answer by user.
      required:
        - id
        - question
        - user
        - selectedAnswerOptions
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        question:
          $ref: '#/components/schemas/PollQuestion'
        user:
          $ref: '#/components/schemas/UserInfo'
        selectedAnswerOptions:
          type: array
          items:
            $ref: '#/components/schemas/PollQuestionAnswerOption'
    UserQuizQuestionAnswer:
      description: |
        The question answer by user.
      required:
        - id
        - question
        - user
        - selectedAnswerOptions
        - answerCorrect
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        question:
          $ref: '#/components/schemas/QuizQuestion'
        user:
          $ref: '#/components/schemas/UserInfo'
        selectedAnswerOptions:
          type: array
          items:
            $ref: '#/components/schemas/PollQuestionAnswerOption'
        answerCorrect:
          type: boolean
          description: True if the answer's correct.
    Quiz:
      description: |
        The quiz.
      required:
        - id
        - name
        - context
        - eventId or sessionId
        - questions
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        context:
          type: string
          description: The context (event or session).
          enum:
            - Event
            - Session
        eventid:
          type: integer
          format: int64
          description: The ID of the event.
        sessionId:
          type: integer
          format: int64
          description: The ID of the session.
        description:
          type: string
          description: The description.
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestion'
        status:
          type: string
          description: The status.
          enum:
            - Active
            - Inactive
        type:
          type: string
          description: >-
            The type. Live quiz should only be displayed to user within
            (startEnd,endDate) time span.
          enum:
            - Live
            - Anytime
        startTime:
          type: string
          format: date
          description: The start date and time (for a live quiz).
        endTime:
          type: string
          format: date
          description: The end date and time (for a live quiz).
    QuizInfo:
      description: |
        The quiz info.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
    Poll:
      description: |
        The poll.
      required:
        - id
        - name
        - context
        - eventId or sessionId
        - questions
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        description:
          type: string
          description: The description.
        context:
          type: string
          description: The context (event or session).
          enum:
            - Event
            - Session
        eventid:
          type: integer
          format: int64
          description: The ID of the event.
        sessionId:
          type: integer
          format: int64
          description: The ID of the session.
        questions:
          type: array
          items:
            $ref: '#/components/schemas/PollQuestion'
        status:
          type: string
          description: The status.
          enum:
            - Active
            - Inactive
        type:
          type: string
          description: >-
            The type. Live poll should only be displayed to user within
            (startEnd,endDate) time span.
          enum:
            - Live
            - Anytime
        startTime:
          type: string
          format: date
          description: The start date and time (for a live poll).
        endTime:
          type: string
          format: date
          description: The end date and time (for a live poll).
    PollInfo:
      description: |
        The poll info.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
    Survey:
      description: |
        The survey.
      required:
        - id
        - name
        - context
        - eventId or sessionId
        - questions
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
        description:
          type: string
          description: The description.
        context:
          type: string
          description: The context (event or session).
          enum:
            - Event
            - Session
        eventid:
          type: integer
          format: int64
          description: The ID of the event.
        sessionId:
          type: integer
          format: int64
          description: The ID of the session.
        questions:
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestion'
        status:
          type: string
          description: The status.
          enum:
            - Active
            - Inactive
        type:
          type: string
          description: >-
            The type. Live survey should only be displayed to user within
            (startEnd,endDate) time span.
          enum:
            - Live
            - Anytime
        startTime:
          type: string
          format: date
          description: The start date and time (for a live survey).
        endTime:
          type: string
          format: date
          description: The end date and time (for a live survey).
    SurveyInfo:
      description: |
        The survey info.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
    UserQuizAnswers:
      description: |
        The user quiz results.
      required:
        - id
        - quiz
        - user
        - completed
        - userAnswers
        - score
        - totalWeight
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        quiz:
          $ref: '#/components/schemas/QuizInfo'
        user:
          $ref: '#/components/schemas/UserInfo'
        userAnswers:
          type: array
          items:
            $ref: '#/components/schemas/UserQuizQuestionAnswer'
        completed:
          type: boolean
          description: True if completed.
        score:
          type: integer
          description: The score.
        totalWeight:
          type: integer
          description: The total quiz weight.
    UserSurveyAnswers:
      description: |
        The user survey results.
      required:
        - id
        - question
        - poll
        - user
        - userAnswers
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        survey:
          $ref: '#/components/schemas/SurveyInfo'
        user:
          $ref: '#/components/schemas/UserInfo'
        userAnswers:
          type: array
          items:
            $ref: '#/components/schemas/UserPollQuestionAnswer'
        completed:
          type: boolean
          description: True if completed.
    UserPollAnswers:
      description: |
        The user poll results.
      required:
        - id
        - question
        - poll
        - user
        - userAnswers
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        poll:
          $ref: '#/components/schemas/PollInfo'
        user:
          $ref: '#/components/schemas/UserInfo'
        userAnswers:
          type: array
          items:
            $ref: '#/components/schemas/UserPollQuestionAnswer'
        completed:
          type: boolean
          description: True if completed.
    TotalPollResults:
      description: |
        The total poll results.
      required:
        - id
        - poll
        - optionResults
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        poll:
          $ref: '#/components/schemas/Poll'
        optionResults:
          type: array
          items:
            $ref: '#/components/schemas/UserPollQuestionAnswer'
    PollQuestionAnswerOptionResults:
      description: |
        The poll option results.
      required:
        - id
        - option
        - numberOfVotes
        - percentage
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        option:
          $ref: '#/components/schemas/PollQuestionAnswerOption'
        numberOfVotes:
          type: integer
          description: The number of votes.
        percentage:
          type: number
          format: float
          description: The percentage.
    EventWallPost:
      description: |
        The event wall post.
      required:
        - id
        - user
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        parentPostId:
          type: integer
          format: int64
          description: The ID of the parent post.
        user:
          $ref: '#/components/schemas/UserInfo'
        text:
          type: string
          description: The HTML formatted text.
        status:
          type: string
          description: The status.
          enum:
            - Published
            - Edited
            - Deleted
        attachedFiles:
          type: array
          items:
            $ref: '#/components/schemas/File'
        childPosts:
          type: array
          items:
            $ref: '#/components/schemas/EventWallPost'
        likeFromUsers:
          type: array
          items:
            type: integer
            format: int64
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
    Conversation:
      description: |
        The conversation.
      required:
        - id
        - participants
        - messages
        - status
        - type
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        participants:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        status:
          type: string
          description: The status.
          enum:
            - Active
            - Deleted
        type:
          type: string
          description: The status.
          enum:
            - Private
            - Session
        session:
          $ref: '#/components/schemas/SessionInfo'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    Message:
      description: |
        The message.
      required:
        - id
        - sender
        - text
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        conversationId:
          type: integer
          format: int64
          description: The ID of the conversation.
        sender:
          $ref: '#/components/schemas/UserInfo'
        text:
          type: string
          description: The HTML formatted text.
        status:
          type: string
          description: The status.
          enum:
            - Sent
            - Edited
            - Deleted
        attachedFiles:
          type: array
          items:
            $ref: '#/components/schemas/File'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    UserEventFeedback:
      description: |
        The event feedback.
      required:
        - id
        - event
        - user
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        event:
          $ref: '#/components/schemas/EventInfo'
        user:
          $ref: '#/components/schemas/UserInfo'
        feedback:
          $ref: '#/components/schemas/UserSurveyAnswers'
        eventRating:
          type: integer
          description: The event rating.
        comment:
          type: string
          description: The comment.
        completed:
          type: boolean
          description: The flag indincating if the feedback is completed.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
    UserSessionFeedback:
      description: |
        The session feedback.
      required:
        - id
        - session
        - user
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        session:
          $ref: '#/components/schemas/SessionInfo'
        user:
          $ref: '#/components/schemas/UserInfo'
        sessionRating:
          type: integer
          description: The session rating.
        speakersRating:
          type: integer
          description: The speakers rating.
        comment:
          type: string
          description: The comment.
        completed:
          type: boolean
          description: The flag indincating if the feedback is completed.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
    Notification:
      description: |
        The notification.
      required:
        - id
        - userId
        - title
        - text
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        userId:
          type: integer
          format: int64
          description: The ID of the user.
        title:
          type: string
          description: The notification title.
          example: New poll available
        text:
          type: string
          description: The notification text.
        type:
          $ref: '#/components/schemas/NotificationType'
        status:
          type: string
          description: The notification status.
          enum:
            - New
            - Read
        createdOn:
          type: string
          format: date
          description: The created on date.
        readOn:
          type: string
          format: date
          description: The read on date.
    NotificationType:
      description: |
        The notification type.
      required:
        - id
        - name
        - text
        - relatedModel
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: NewPoll
        text:
          type: string
          description: The text.
          example: New poll is available.
        relatedModel:
          type: string
          description: The related model.
          example: Poll
    EventNotification:
      description: >
        The event notification sent by admin. The notification will be created
        for every user from recipient types associated with event.
      required:
        - eventId
        - title
        - text
        - recipientTypes
      properties:
        eventId:
          type: integer
          format: int64
          description: The ID of the event.
        title:
          type: string
          description: The notification title.
          example: New poll available
        text:
          type: string
          description: The notification text.
        recipientTypes:
          type: array
          items:
            type: string
            enum:
              - All
              - Speakers
              - AllAttendees
              - ApprovedAttendees
              - WaitlistedAttendees
              - RejectedAttendees
              - DeletedAttendees
        type:
          $ref: '#/components/schemas/NotificationType'
        createdOn:
          type: string
          format: date
          description: The created on date.
        createdBy:
          type: string
          description: The created by user.
    UserNote:
      description: |
        The user note.
      required:
        - id
        - userId
        - session
        - event
        - text
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        userId:
          type: integer
          format: int64
          description: The ID of the user.
        session:
          $ref: '#/components/schemas/SessionInfo'
        event:
          $ref: '#/components/schemas/EventInfo'
        text:
          type: string
          description: The note text (HTML formatted).
        attachedFiles:
          type: array
          items:
            $ref: '#/components/schemas/File'
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The read on date.
    Email:
      description: |
        The email.
      required:
        - id
        - emails
        - title
        - text
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        emails:
          type: array
          items:
            type: string
        title:
          type: string
          description: The title.
        text:
          type: string
          description: The text.
        scheduled:
          type: boolean
          description: True if the email is scheduled.
        dateScheduled:
          type: string
          description: The date the email is scheduled.
        timezone:
          $ref: '#/components/schemas/Timezone'
        status:
          type: string
          description: The notification status.
          enum:
            - Sent
            - Scheduled
            - Deleted
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    Timezone:
      description: |
        The timezone.
      required:
        - id
        - value
        - time
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        value:
          type: string
          description: The value.
          example: US/Hawaii.
        time:
          type: string
          description: The time.
          example: '(GMT-10:00)'
    Designation:
      description: |
        The user designation (role) in the company.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
          example: Marketing Staff
    Country:
      description: |
        The country.
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        name:
          type: string
          description: The name.
    FAQQuestionAnswer:
      description: |
        The FAQ question/answer.
      required:
        - id
        - eventId
        - questionText
        - answerText
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entity.
        eventId:
          type: integer
          format: int64
          description: The ID of the event.
        questionText:
          type: string
          description: The question text.
        answerText:
          type: string
          description: The answer text.
        orderNumber:
          type: integer
          description: The number in the list.
        createdOn:
          type: string
          format: date
          description: The created on date.
        updatedOn:
          type: string
          format: date
          description: The updated on date.
        createdBy:
          type: string
          description: The created by user.
        updatedBy:
          type: string
          description: The updated by user.
    EventFAQ:
      description: |
        The event.
      required:
        - id
        - eventId
        - questionAnswers
      properties:
        id:
          type: integer
          format: int64
        eventId:
          type: integer
          format: int64
          description: The ID of the event.
        questionAnswers:
          type: array
          items:
            $ref: '#/components/schemas/FAQQuestionAnswer'
    UserPreferences:
      description: |
        The user preferenes.
      required:
        - userId
        - notificationMethodPreferences
        - rooms
        - food
      properties:
        userId:
          type: integer
          format: int64
          description: The ID of the user.
        notificationMethodPreferences:
          type: array
          items:
            $ref: '#/components/schemas/UserNotificationMethodPreferences'
        rooms:
          type: array
          items:
            type: string
            enum:
              - Single
              - Double
              - Share
        food:
          type: array
          items:
            type: string
            enum:
              - PureVeg
              - LowCarb
              - Western
              - Custom
              - Asian
    UserNotificationMethodPreferences:
      description: |
        The user notification preferenes.
      required:
        - userId
        - notificationTypesCovered
        - notificationMethod
      properties:
        userId:
          type: integer
          format: int64
          description: The ID of the user.
        notificationTypesCovered:
          type: array
          items:
            $ref: '#/components/schemas/NotificationType'
        notificationMethod:
          type: string
          enum:
            - SMS
            - Email
            - InApp
    EventDashboard:
      description: |
        The Event dashboard.
      required:
        - id
        - name
      properties:
        eventId:
          type: integer
          format: int64
          description: The ID of the event.
        eventName:
          type: string
          description: The name of the event.
        numberOfSessions:
          type: integer
          description: The number of sessions.
        numberOfAttendees:
          type: integer
          description: The number of attendees.
        numberOfSpeakers:
          type: integer
          description: The number of speakers.
        numberOfApprovedAttendees:
          type: integer
          description: The number of approved attendees.
        numberOfRejectedAttendees:
          type: integer
          description: The number of rejected attendees.
        numberOfTicketsLefts:
          type: integer
          description: The number of tickets left.
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionInfoWithStatistics'
    Engagements:
      description: |
        The engagements (surveys, polls, quizes).
      required:
        - polls
        - surveys
        - quizes
      properties:
        polls:
          type: array
          items:
            $ref: '#/components/schemas/Poll'
        surveys:
          type: array
          items:
            $ref: '#/components/schemas/Survey'
        quizes:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'
